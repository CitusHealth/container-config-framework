# This is considered a "typical" container Makefile and is designed to be 
# symlink'd from a container directory as "Makefile"

SHELL := /bin/bash
MAKEFLAGS := silent
DOCKER_HOST_IP_ADDR := $(shell echo `/sbin/ifconfig eth0 | grep -i mask | awk '{print $$2}'| cut -f2 -d:`)
CURRENT_USER := $(shell echo `whoami`)
CURRENT_USER_ID := $(shell echo `id -u`)
CURRENT_USER_GROUP_ID := $(shell echo `id -g`)
CURRENT_USER_HOME := $(HOME)
CURRENT_DIR_PATH := $(shell echo `pwd`)
CURRENT_DIR_NAME := $(shell basename `pwd`)

CONTAINER_NAME := $(CURRENT_DIR_NAME)
CONTAINER_DEFN_HOME := $(CURRENT_DIR_PATH)
CONTAINER_DOCKERFILE := Dockerfile

CONTAINER_IS_RUNNING := $(shell docker ps --filter "name=$(CONTAINER_NAME)" --filter "status=running" --quiet)

CCF_HOME ?= /opt/container-config-framework
JSONNET_PATH ?= $(HOME)/.ccf/secrets:$(HOME)/.ccf/open:$(CCF_HOME)/etc

# This is the Makefile environment's JSonnet template file which is generated
# each time the make command is run. It's basically a convenience wrapper that
# makes the runtime environment available to the CONTAINER_DEFN_JSONNET file.
CONTAINER_CONF_JSONNET_TMPL ?= $(CCF_HOME)/etc/container.facts.ccf-tmpl.jsonnet
CONTAINER_FACTS_GENERATED_FILE ?= container.facts.json

# This is the primary JSonnet configuration file, it creates all the container's
# definition and configuration files using Jsonnet -m (multi-file) strategy.
CONTAINER_DEFN_JSONNET ?= container.ccf-defn.jsonnet

# This file holds the list of files generated by the jsonnet --multi command
CONTAINER_DEFN_JSONNET_GENERATED_FILES_LIST := .container.ccf-defn.jsonnet_generated
DELETE_GENERATED_FILES_SCRIPT := .delete_generated_files.sh

CUSTOM_POST_CONFIGURE_SCRIPT_NAME := ./after_configure.make-plugin.sh
CUSTOM_POST_START_SCRIPT_NAME := ./after_start.make-plugin.sh
CUSTOM_INCLUDE_FILE := ./container.make.inc

default: inspect

generate-container-conf:
	echo "Generated $(CONTAINER_FACTS_GENERATED_FILE) from $(CONTAINER_CONF_JSONNET_TMPL) using JSONNET_PATH $(JSONNET_PATH)"
	jsonnet --ext-str CCF_HOME=$(CCF_HOME) \
	        --ext-str GENERATED_ON="`date`" \
			--ext-str DOCKER_HOST_IP_ADDR=$(DOCKER_HOST_IP_ADDR) \
	        --ext-str containerName=$(CONTAINER_NAME) \
			--ext-str containerDefnHome=$(CONTAINER_DEFN_HOME) \
			--ext-str currentUserName=$(CURRENT_USER) \
			--ext-str currentUserId=$(CURRENT_USER_ID) \
			--ext-str currentUserGroupId=$(CURRENT_USER_GROUP_ID) \
			--ext-str currentUserHome=$(CURRENT_USER_HOME) \
			--output-file $(CONTAINER_FACTS_GENERATED_FILE) \
			$(CONTAINER_CONF_JSONNET_TMPL)
	echo "Generated container definitions from $(CONTAINER_DEFN_JSONNET) (stored in $(CONTAINER_DEFN_JSONNET_GENERATED_FILES_LIST)):"
	jsonnet -S --multi . $(CONTAINER_DEFN_JSONNET) > $(CONTAINER_DEFN_JSONNET_GENERATED_FILES_LIST)
	cat $(CONTAINER_DEFN_JSONNET_GENERATED_FILES_LIST)  | sed 's/^\.\//  > /'
	echo "Created .gitignore to prevent tracking of generated files"
	echo "# Generated by Makefile. DO NOT EDIT" > .gitignore
	echo $(CONTAINER_FACTS_GENERATED_FILE) >> .gitignore
	echo $(CONTAINER_DEFN_JSONNET_GENERATED_FILES_LIST) >> .gitignore
	echo $(DELETE_GENERATED_FILES_SCRIPT) >> .gitignore
	cat $(CONTAINER_DEFN_JSONNET_GENERATED_FILES_LIST) | sed 's/^\.\///' >> .gitignore
	cat $(CONTAINER_DEFN_JSONNET_GENERATED_FILES_LIST) | sed 's/^(.*)/rm \1&&echo "Deleted generated file '\1'"/' > $(DELETE_GENERATED_FILES_SCRIPT)

clean-generated-container-conf:
	echo "Deleted $(CONTAINER_FACTS_GENERATED_FILE), generated from $(CONTAINER_CONF_JSONNET_TMPL)"
	rm -f $(CONTAINER_FACTS_GENERATED_FILE)
	bash $(DELETE_GENERATED_FILES_SCRIPT)
	echo "Deleted $(CONTAINER_DEFN_JSONNET_GENERATED_FILES_LIST) and $(DELETE_GENERATED_FILES_SCRIPT)"
	rm -f $(CONTAINER_DEFN_JSONNET_GENERATED_FILES_LIST)
	rm -f $(DELETE_GENERATED_FILES_SCRIPT)

.ONESHELL:
## Generate all container artifacts from Jsonnet config
configure: generate-container-conf
	if [ -f $(CUSTOM_POST_CONFIGURE_SCRIPT_NAME) ]; then
		echo "Found custom configuration script $(CUSTOM_POST_CONFIGURE_SCRIPT_NAME) for $(CONTAINER_NAME)"
		sudo chmod +x $(CUSTOM_POST_CONFIGURE_SCRIPT_NAME)
		$(CUSTOM_POST_CONFIGURE_SCRIPT_NAME) $(CONTAINER_NAME)
	fi

.ONESHELL:
## Start the container and all dependencies
start: configure
	docker-compose up -d --force-recreate
	if [ -f $(CUSTOM_POST_START_SCRIPT_NAME) ]; then
		echo "Found custom start script $(CUSTOM_POST_START_SCRIPT_NAME) for $(CONTAINER_NAME)"
		sudo chmod +x $(CUSTOM_POST_START_SCRIPT_NAME)
		$(CUSTOM_POST_START_SCRIPT_NAME) $(CONTAINER_NAME)
	fi

shell:
	docker run -it --entrypoint="/bin/sh" $(CONTAINER_NAME) 

bash:
	docker run -it --entrypoint="/bin/bash" $(CONTAINER_NAME)

## If the container is running, inspect its settings
inspect:
ifdef CONTAINER_IS_RUNNING
	docker ps -a --filter "name=$(CONTAINER_NAME)" --format "table {{.ID}} {{.Names}}\t{{.Status}}\t{{.Ports}}\\t{{.Networks}}"
	docker images $(CONTAINER_NAME)
	printf "Volumes: "
	docker inspect -f '{{ json .Mounts }}' $(CONTAINER_NAME) | jq 
else
	echo "Container $(CONTAINER_NAME) is not running, here's docker ps -a:"
	echo ''
	docker ps -a --format "table {{.ID}} {{.Names}}\t{{.Status}}"
endif

## If the container is running, show its logs
logs:
ifdef CONTAINER_IS_RUNNING
	docker logs $(CONTAINER_NAME)
else
	echo "Container $(CONTAINER_NAME) is not running, here's docker ps -a:"
	echo ''
	docker ps -a --format "table {{.ID}} {{.Names}}\t{{.Status}}"
endif

## If the container is running, show its ports
ports:
ifdef CONTAINER_IS_RUNNING
	docker port $(CONTAINER_NAME)
else
	echo "Container $(CONTAINER_NAME) is not running, here's docker ps -a:"
	echo ''
	docker ps -a --format "table {{.ID}} {{.Names}}\t{{.Status}}"
endif

## Stop the container but retain volumes and generated files
stop: 
	docker-compose down

## Stop the container and delete associated volumes
kill: 
	docker-compose down --volumes

## Stop the container and clean up generated files
clean: kill clean-generated-container-conf

.ONESHELL:
## Build the container using Dockerfile in this directory
build: configure
	if [ -f $(CONTAINER_DOCKERFILE) ]; then
		docker images $(CONTAINER_NAME)
		echo "Removing image $(CONTAINER_NAME)"
		docker rmi --force $(CONTAINER_NAME)
		docker build --force-rm --no-cache --tag $(CONTAINER_NAME) .
	else
		echo "No $(CONTAINER_DOCKERFILE) found for $(CONTAINER_NAME)."
	fi

## Show images associated with this container
show-images:
	docker images $(CONTAINER_NAME)

## Remove any images associated with this container
clean-images:
	docker images $(CONTAINER_NAME)
	echo "Removing image $(CONTAINER_NAME)"
	docker rmi --force $(CONTAINER_NAME)

## Remove all containers that have exited (not specific to this container)
clean-exited-containers:
	docker ps -aq --no-trunc -f status=exited | xargs docker rm

## Remove all dangling or untagged container images (not specific to this container)
clean-dangling-untagged-container-images:
	docker images -q --filter dangling=true | xargs docker rmi

## See if all developer dependencies are installed
check-dependencies: check-jsonnet check-jq check-docker check-docker-compose check-user-in-docker-group check-docker-networks
	printf "[*] "
	make -v | head -1
	echo "[*] Shell: $$SHELL"

JSONNET_INSTALLED := $(shell command -v jsonnet 2> /dev/null)
check-jsonnet:
ifndef JSONNET_INSTALLED
	echo "[ ] Did not find jsonnet, run this to set it up:"
	echo "    sudo ln -s /opt/container-config-framework/bin/jsonnet-v0.11.2 /usr/bin/jsonnet"
else
	printf "[*] "
	jsonnet --version
endif

JQ_INSTALLED := $(shell command -v jq 2> /dev/null)
check-jq:
ifndef JQ_INSTALLED
	echo "[ ] Did not find jq, install using:"
	echo "    sudo apt-get install jq"
else
	printf "[*] "
	jq --version
endif

USER_IN_DOCKER_GROUP := $(shell groups $$USER | grep '\bdocker\b')
check-user-in-docker-group:
ifndef USER_IN_DOCKER_GROUP
	echo "[ ] User $$USER is not in docker group, sudo will be required and scripts won't work."
else
	echo "[*] User $$USER is in docker group"
endif

DOCKER_INSTALLED := $(shell command -v docker 2> /dev/null)
check-docker:
ifndef DOCKER_INSTALLED
	echo "[ ] Unable to find docker, install it using 'make setup-docker'."
else
	printf "[*] "
	docker --version
endif

DOCKER_COMPOSE_INSTALLED := $(shell command -v docker-compose 2> /dev/null)
check-docker-compose: check-docker
ifndef DOCKER_COMPOSE_INSTALLED
	echo "[ ] Unable to find docker-compose, install it using 'make setup-docker'."
else
	printf "[*] "
	docker-compose --version
endif

DOCKER_NETWORK_DEFAULT := 'appliance'
DOCKER_NETWORKS_SETUP := $(shell sudo docker network ls | grep $(DOCKER_NETWORK_DEFAULT))
check-docker-networks: check-docker
ifndef DOCKER_NETWORKS_SETUP
	echo "[ ] Docker networks not setup yet, configure it with 'make setup-docker-networks'."
else
	echo "[*] Docker networks setup"
endif

TARGET_MAX_CHAR_NUM=10
# All targets should have a ## Help text above the target and they'll be automatically collected
# Show help, using auto generator from https://gist.github.com/prwhite/8168133
help: generate-container-conf
	@echo ''
	@echo 'Usage:'
	@echo '  ${YELLOW}make${RESET} ${GREEN}<target>${RESET}'
	@echo ''
	@echo 'Targets:'
	@awk '/^[a-zA-Z\-\_0-9]+:/ { \
		helpMessage = match(lastLine, /^## (.*)/); \
		if (helpMessage) { \
			helpCommand = substr($$1, 0, index($$1, ":")-1); \
			helpMessage = substr(lastLine, RSTART + 3, RLENGTH); \
			printf "  ${YELLOW}%-$(TARGET_MAX_CHAR_NUM)s${RESET} ${GREEN}%s${RESET}\n", helpCommand, helpMessage; \
		} \
	} \
	{ lastLine = $$0 }' $(MAKEFILE_LIST)
	@echo ''	
	@echo 'JSONNET_JPATH=$(JSONNET_JPATH)'
	@echo '$(CONTAINER_FACTS_GENERATED_FILE):'
	cat $(CONTAINER_FACTS_GENERATED_FILE)

ifneq ("$(wildcard $(CUSTOM_INCLUDE_FILE))","")
include $(CUSTOM_INCLUDE_FILE)
endif

